//------------------------------------------------
//--- 010 Editor v15.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: The master file that includes all the binary directories
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------]

#include "nuccChunkBinaries/pairSpSkillCombinationParam.bt"
#include "nuccChunkBinaries/prmParam.bt"
#include "nuccChunkBinaries/characterSelectParam.bt"
#include "nuccChunkBinaries/acc.bin.bt"
#include "nuccChunkBinaries/accessoriesParam.bt"
#include "nuccChunkBinaries/accessoryExceptionParam.bt"
#include "nuccChunkBinaries/accessoryNotAttachParam.bt"
#include "nuccChunkBinaries/CharaPoseParam.bt"
#include "nuccChunkBinaries/charaTagParam.bt"
#include "nuccChunkBinaries/chatStampParam.bt"
#include "nuccChunkBinaries/collectNameParam.bt"
#include "nuccChunkBinaries/conditionprm.bt"
#include "nuccChunkBinaries/costumeBreakColorParam.bt"
#include "nuccChunkBinaries/costumeBreakParam.bt"
#include "nuccChunkBinaries/costumeParam.bt"

typedef struct
{  
    switch (chunkName)     
        { 
            case ("pairSpSkillCombinationParam"):
                struct pairSpSkillCombinationParam TeamOugiIndex;
                break;
            case ("accessoryExceptionParam"):
                struct accessoryExceptionParam accessoryException;
                break;
            case ("accessoryNotAttachParam"):
                struct accessoryNotAttachParam accessoryNotAttach;
                break;
            case ("accessoryParam"):
                struct accessoryParam AccessoryParam;
                break; 
            case ("characterSelectParam"):
                struct characterSelectStruct CharacterSelectData;
                break;
            case ("CharaPoseParam"):
                struct CharaPoseParam CharaPoseData;
                break;
            case ("charaTagParam"):
                struct charaTagParam charaTagData;
                break;
            case ("chatStampParam"):
                struct chatStampParam chatStampData;
                break;
            case ("collectNameParam"):
                struct collectNameParam collectNameData;
                break;
            case ("conditionprm"):
                struct conditionprm ConditionPrmData;
                break;
            case ("costumeBreakColorParam"):
                struct costumeBreakColorParam costumeBreakColor;
                break;
            case ("costumeBreakParam"):
                struct costumeBreakParam costumeBreakData;
                break;
            case ("costumeParam"):
                struct costumeParam costumeParamData;
                break;
            default:
                // Compare chunkName to each suffix
                if (EndsWith(chunkName, "prm_awa")  // character controls
                    || EndsWith(chunkName, "prm_skl")
                    || EndsWith(chunkName, "prm_awa2")
                    || EndsWith(chunkName, "prm_spl")
                    || EndsWith(chunkName, "prm_boss")
                    || EndsWith(chunkName, "prm_upgrade01")
                    || EndsWith(chunkName, "prm_upgrade02")
                    || EndsWith(chunkName, "prm_upgrade03")
                    || EndsWith(chunkName, "prm_boss01")
                    || EndsWith(chunkName, "prm_boss02")
                    || EndsWith(chunkName, "prm_boss03")
                    || EndsWith(chunkName, "prm_boss04"))            
                    {
                        struct Pl_AnmStructMain VerBinary;
                        
                    }
                else if (EndsWith(chunkName, "prm_sklslot") ) // _x skill slots basically projectiles index
                    {
                         struct ProjectileEntries ProjectileSettings; 
                   
                    } 
                else if (EndsWith(chunkName, "prm_etc") ) //movement settings
                    {
                         struct GeneralMovementEntries MovementSettings; 
                    }
                else if (EndsWith(chunkName, "prm_hit") ) //for hurtspheres and hitspheres
                    {
                         struct CollisionStruct CollisionSettings;   
                    } 
                else if (EndsWith(chunkName, "prm_load") )
                    {
                         struct PrmLoadSettings Files;     
                    } 
                else if (EndsWith(chunkName, "acc") )
                    {
                         struct AccesoriesSettings Accessory;         
                    } 
                else
                {
                    uchar Data[Size];
                }
            break;
        }
}nuccChunkBinary<optimize= false>;

int EndsWith(string str, string suffix)
{
    local int str_len = Strlen(str);
    local int suffix_len = Strlen(suffix);

    // Check if the string is long enough to contain the suffix
    if (str_len >= suffix_len)
    {
        // Extract the end of the string and compare with the suffix
        local string endOfString = SubStr(str, str_len - suffix_len, suffix_len);
        return (Strcmp(endOfString, suffix) == 0);
    }
    return 0;  // Return false if the string is shorter than the suffix
}